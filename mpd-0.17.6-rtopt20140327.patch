#18-Nov-13
# - add io_priority  --  io thread priority setting
#
#27-Mar-14
# - add timerslack   --  output thread's timerslack setting
#                        default value: 100 uSec
#
#                        ex
#                          audio_output {
#                                type     "alsa"
#                                ...
#                                ...
#                                timerslack    "100"
#                          }
#
diff --git a/Makefile.am b/Makefile.am
index 90fa348..3a5d925 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -221,6 +221,12 @@ mpd_headers = \
 	src/input/archive_input_plugin.h \
 	src/mpd_error.h
 
+# yan
+if ENABLE_RTOPT
+mpd_headers += src/rt_opt.h
+endif
+# yan
+
 src_mpd_SOURCES = \
 	$(mpd_headers) \
 	$(DECODER_SRC) \
@@ -396,6 +402,13 @@ libutil_a_SOURCES = \
 	src/util/byte_reverse.c src/util/byte_reverse.h \
 	src/util/bit_reverse.c src/util/bit_reverse.h
 
+# yan
+if ENABLE_RTOPT
+src_mpd_SOURCES += \
+	src/rt_opt.c
+endif
+# yan
+
 # PCM library
 
 libpcm_a_SOURCES = \
diff --git a/configure.ac b/configure.ac
index d9fd301..cdd7fbc 100644
--- a/configure.ac
+++ b/configure.ac
@@ -148,6 +148,7 @@ AC_SEARCH_LIBS([exp], [m],,
 
 AC_CHECK_HEADERS(locale.h)
 AC_CHECK_HEADERS(valgrind/memcheck.h)
+AC_CHECK_HEADERS([sys/prctl.h], AC_CHECK_FUNCS([prctl]))
 
 dnl ---------------------------------------------------------------------------
 dnl Allow tools to be specifically built
@@ -458,6 +459,12 @@ AC_ARG_WITH(tremor-includes,
 		[directory where Tremor header files are installed (optional)]),,
 	tremor_includes="")
 
+dnl ----------------yan
+AC_ARG_ENABLE(rtopt,
+	AS_HELP_STRING([--enable-rtopt], [enable realtime support]),,
+	[enable_rtopt=no])
+dnl ----------------yan
+
 dnl ---------------------------------------------------------------------------
 dnl Mandatory Libraries
 dnl ---------------------------------------------------------------------------
@@ -566,6 +573,15 @@ if test x$enable_libwrap = xyes; then
 	AC_DEFINE(HAVE_LIBWRAP, 1, [define to enable libwrap library])
 fi
 
+dnl ---------------------------------- rtopt ---------------------------------
+dnl    -- yan --
+if test x$enable_rtopt = xyes; then
+	AC_DEFINE([ENABLE_RTOPT], 1, [Define to enable realtime option support])
+fi
+
+AM_CONDITIONAL(ENABLE_RTOPT, test x$enable_rtopt = xyes)
+dnl    -- yan --
+
 dnl ---------------------------------------------------------------------------
 dnl Metadata Plugins
 dnl ---------------------------------------------------------------------------
@@ -1574,6 +1590,7 @@ printf '\nOther features:\n\t'
 results(lsr, [libsamplerate])
 results(inotify, [inotify])
 results(sqlite, [SQLite])
+results(rtopt, [rtopt])
 
 printf '\nMetadata support:\n\t'
 results(id3,[ID3])
diff --git a/src/conf.c b/src/conf.c
index a22f2ec..3eb24ee 100644
--- a/src/conf.c
+++ b/src/conf.c
@@ -102,6 +102,9 @@ static struct config_entry config_entries[] = {
 	{ .name = CONF_DESPOTIFY_PASSWORD, false, false},
 	{ .name = CONF_DESPOTIFY_HIGH_BITRATE, false, false },
 	{ .name = "filter", true, true },
+#ifdef ENABLE_RTOPT
+	{ .name = CONF_RTOPT, false, true },
+#endif
 };
 
 static bool
diff --git a/src/conf.h b/src/conf.h
index 815c739..fe419b8 100644
--- a/src/conf.h
+++ b/src/conf.h
@@ -76,6 +76,10 @@
 #define CONF_DESPOTIFY_PASSWORD         "despotify_password"
 #define CONF_DESPOTIFY_HIGH_BITRATE     "despotify_high_bitrate"
 
+#ifdef ENABLE_RTOPT
+#define CONF_RTOPT                      "realtime_option"
+#endif
+
 #define DEFAULT_PLAYLIST_MAX_LENGTH (1024*16)
 #define DEFAULT_PLAYLIST_SAVE_ABSOLUTE_PATHS false
 
diff --git a/src/decoder_thread.c b/src/decoder_thread.c
index af80ed4..b0c1a38 100644
--- a/src/decoder_thread.c
+++ b/src/decoder_thread.c
@@ -34,6 +34,10 @@
 #include "uri.h"
 #include "mpd_error.h"
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.h"
+#endif
+
 #include <glib.h>
 
 #include <unistd.h>
@@ -460,6 +464,10 @@ decoder_task(gpointer arg)
 {
 	struct decoder_control *dc = arg;
 
+#ifdef ENABLE_RTOPT
+	rtopt_change_priority(RTOPT_DECODER_PRIORITY_NAME);
+#endif
+
 	decoder_lock(dc);
 
 	do {
diff --git a/src/io_thread.c b/src/io_thread.c
index 7c080ad..31bae13 100644
--- a/src/io_thread.c
+++ b/src/io_thread.c
@@ -18,6 +18,11 @@
  */
 
 #include "io_thread.h"
+#include "config.h"
+
+#ifdef ENABLE_RTOPT
+#include "rt_opt.h"
+#endif
 
 #include <assert.h>
 
@@ -43,6 +48,9 @@ io_thread_run(void)
 static gpointer
 io_thread_func(G_GNUC_UNUSED gpointer arg)
 {
+#ifdef ENABLE_RTOPT
+	rtopt_change_priority(RTOPT_IO_PRIORITY_NAME);
+#endif
 	/* lock+unlock to synchronize with io_thread_start(), to be
 	   sure that io.thread is set */
 	g_mutex_lock(io.mutex);
diff --git a/src/main.c b/src/main.c
index 12f8d86..4721df2 100644
--- a/src/main.c
+++ b/src/main.c
@@ -69,6 +69,10 @@
 #include "archive_list.h"
 #endif
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.h"
+#endif
+
 #include <glib.h>
 
 #include <unistd.h>
@@ -310,6 +314,7 @@ shutdown_event_emitted(void)
 	g_main_loop_quit(main_loop);
 }
 
+
 int main(int argc, char *argv[])
 {
 #ifdef WIN32
@@ -319,6 +324,8 @@ int main(int argc, char *argv[])
 #endif
 }
 
+
+
 int mpd_main(int argc, char *argv[])
 {
 	struct options options;
@@ -374,12 +381,14 @@ int mpd_main(int argc, char *argv[])
 		return EXIT_FAILURE;
 	}
 
+#ifdef ENABLE_RTOPT
+	rtopt_init();
+	rtopt_change_priority(RTOPT_MAIN_PRIORITY_NAME);
+#endif
 	daemonize_set_user();
-
 	main_task = g_thread_self();
 	main_loop = g_main_loop_new(NULL, FALSE);
 	main_cond = g_cond_new();
-
 	event_pipe_init();
 	event_pipe_register(PIPE_EVENT_IDLE, idle_event_emitted);
 	event_pipe_register(PIPE_EVENT_SHUTDOWN, shutdown_event_emitted);
@@ -478,6 +487,10 @@ int mpd_main(int argc, char *argv[])
 	win32_app_started();
 #endif
 
+#ifdef ENABLE_RTOPT
+	rtopt_memlock();
+#endif
+
 	/* run the main loop */
 	g_main_loop_run(main_loop);
 
diff --git a/src/output_internal.h b/src/output_internal.h
index 9d975d7..38413bb 100644
--- a/src/output_internal.h
+++ b/src/output_internal.h
@@ -230,6 +230,7 @@ struct audio_output {
 	 * Has the output finished playing #chunk?
 	 */
 	bool chunk_finished;
+
 };
 
 /**
diff --git a/src/output_thread.c b/src/output_thread.c
index 4eef2cc..97aacc2 100644
--- a/src/output_thread.c
+++ b/src/output_thread.c
@@ -32,6 +32,10 @@
 #include "notify.h"
 #include "gcc.h"
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.h"
+#endif
+
 #include <glib.h>
 
 #include <assert.h>
@@ -580,6 +584,11 @@ static gpointer audio_output_task(gpointer arg)
 {
 	struct audio_output *ao = arg;
 
+#ifdef ENABLE_RTOPT
+	rtopt_change_output_priority(ao->name);
+	rtopt_change_output_timerslack(ao->name);
+#endif
+
 	g_mutex_lock(ao->mutex);
 
 	while (1) {
diff --git a/src/player_thread.c b/src/player_thread.c
index ac0b057..1396ce0 100644
--- a/src/player_thread.c
+++ b/src/player_thread.c
@@ -36,6 +36,10 @@
 #include "buffer.h"
 #include "mpd_error.h"
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.h"
+#endif
+
 #include <glib.h>
 
 #undef G_LOG_DOMAIN
@@ -1083,6 +1087,11 @@ player_task(gpointer arg)
 	struct player_control *pc = arg;
 
 	struct decoder_control *dc = dc_new(pc->cond);
+ 
+#ifdef ENABLE_RTOPT
+	rtopt_change_priority(RTOPT_PLAYER_PRIORITY_NAME);
+#endif
+
 	decoder_thread_start(dc);
 
 	player_buffer = music_buffer_new(pc->buffer_chunks);
diff --git a/src/rt_opt.c b/src/rt_opt.c
new file mode 100644
index 0000000..e2bf1fa
--- /dev/null
+++ b/src/rt_opt.c
@@ -0,0 +1,516 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config.h"
+#include "conf.h"
+
+#include "mpd_error.h"
+
+#include "rt_opt.h"
+
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <assert.h>
+
+#include <sched.h>
+#include <sys/syscall.h>
+#include <unistd.h>
+
+#define IS_ENABLE_RTOPT			enable_rtopt
+#define IS_ENABLE_MEMLOCK		enable_memlock
+#define IS_ENABLE_PRIORITY(p)	( (p) != RTOPT_DISABLE )
+
+#define AUDIO_OUTPUT_PRIORITY      	"priority"
+#define AUDIO_OUTPUT_NAME   		"name"
+#define AUDIO_OUTPUT_TIMERSLACK		"timerslack"
+#define DEFAULT_TIMERSLACK		((unsigned)100)
+
+#define IS_EQUAL_PRIORITY(p1,p2) (((p1)->policy    == (p2)->policy) && \
+									   ((p1)->priority == (p2)->priority))
+
+#define MIN_PRIORITY				1
+#define MAX_PRIORITY				99
+
+#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
+
+struct policy_info {
+	const char*  name;
+	const int    policy;
+};
+
+static struct policy_info policy_tab[] = {
+		{ .name = RTOPT_SCHED_OTHER, .policy = SCHED_OTHER },
+		{ .name = RTOPT_SCHED_FIFO,   .policy = SCHED_FIFO },
+		{ .name = RTOPT_SCHED_RR,     .policy = SCHED_RR },
+		{ .name = RTOPT_SCHED_BATCH,  .policy = SCHED_BATCH },
+#ifdef SCHED_IDLE
+		{ .name = RTOPT_SCHED_IDLE,   .policy = SCHED_IDLE }
+#endif
+};
+
+static const char* priority_keys[] = {
+		RTOPT_MAIN_PRIORITY_NAME,
+		RTOPT_IO_PRIORITY_NAME,
+		RTOPT_PLAYER_PRIORITY_NAME,
+		RTOPT_DECODER_PRIORITY_NAME,
+		RTOPT_UPDATE_PRIORITY_NAME
+};
+
+
+static struct rtopt_priority priority_tab[ARRAY_SIZE(priority_keys)];
+
+static struct rtopt_priority **output_priority_tab = NULL;
+static unsigned output_count = 0;
+
+static bool enable_rtopt = false;
+static bool enable_memlock = false;
+static size_t stack_reserve = RTOPT_DEFAULT_STACK_RESERVE;
+static size_t heap_reserve  = RTOPT_DEFAULT_HEAP_RESERVE;
+
+
+static void setUnlimited( const int target, const char *target_name);
+static int get_policy(char *name);
+static void init_priority_tab(void);
+static unsigned audio_output_config_count(void);
+static unsigned init_output_priority_tab(void);
+static int strtointeger(char *str, int *ival);
+static void parse_priority(const char *paramstr, struct rtopt_priority *priority);
+static void set_parameter(void);
+static const struct rtopt_priority *get_priority_param(const char *key);
+static const struct rtopt_priority *get_output_priority_param(const char *key);
+static void reset_limit(void);
+static int get_current_priority(struct rtopt_priority *priority);
+static int change_priority(const struct rtopt_priority *priority);
+
+static void SetThreadIdlePriority(const char *name);
+
+#ifdef HAVE_PRCTL
+#include <sys/prctl.h>
+#endif
+
+static int
+ioprio_set(int which, int who, int ioprio)
+{
+        return syscall(__NR_ioprio_set, which, who, ioprio);
+}
+
+#define _IOPRIO_WHO_PROCESS	1
+#define _IOPRIO_CLASS_IDLE	3
+#define _IOPRIO_CLASS_SHIFT	13
+#define _IOPRIO_IDLE		((_IOPRIO_CLASS_IDLE << _IOPRIO_CLASS_SHIFT) | 7)
+
+static void
+ioprio_set_idle(void)
+{
+  //        static int _IOPRIO_WHO_PROCESS = 1;
+  //        static int _IOPRIO_CLASS_IDLE = 3;
+  //        static int _IOPRIO_CLASS_SHIFT = 13;
+  //        static int _IOPRIO_IDLE =
+  //                (_IOPRIO_CLASS_IDLE << _IOPRIO_CLASS_SHIFT) | 7;
+
+        ioprio_set(_IOPRIO_WHO_PROCESS, 0, _IOPRIO_IDLE);
+}
+
+static inline void
+SetThreadTimerSlackUS(unsigned long slack_us)
+{
+#if defined(HAVE_PRCTL) && defined(PR_SET_TIMERSLACK)
+  prctl(PR_SET_TIMERSLACK, slack_us * 1000ul,0,0,0);
+  g_debug("set timerslack %lu usec",slack_us);
+#else
+  g_debug("timerslack is not supported");
+  (void)slack_us;
+#endif
+}
+
+static void
+setUnlimited( const int target, const char *target_name) {
+	const struct rlimit unlimited = {
+			.rlim_cur = RLIM_INFINITY,
+			.rlim_max = RLIM_INFINITY
+	};
+	const int res = setrlimit(target,&unlimited);
+	if ( res < 0 ) {
+		MPD_ERROR("setrlimit %s error %d(%s)\n",(target_name),errno,strerror(errno));
+	}
+}
+
+static int
+get_policy(char *name) {
+	for (unsigned i = 0; i < ARRAY_SIZE(policy_tab); i++ ) {
+		if (strcmp(name,policy_tab[i].name) == 0) {
+			return policy_tab[i].policy;
+		}
+	}
+	return RTOPT_DISABLE;
+}
+
+static void
+init_priority_tab(void) {
+	for (unsigned i = 0; i < ARRAY_SIZE(priority_tab); i++) {
+		priority_tab[i].name = priority_keys[i];
+		priority_tab[i].policy = RTOPT_DISABLE;
+		priority_tab[i].priority = 0;
+/*
+		priority_tab[i].policy = SCHED_OTHER;
+		priority_tab[i].priority = 0;
+*/
+	}
+}
+
+/*  from output_all.c  */
+static unsigned
+audio_output_config_count(void)
+{
+	unsigned int nr = 0;
+	const struct config_param *param = NULL;
+
+	while ((param = config_get_next_param(CONF_AUDIO_OUTPUT, param)))
+		nr++;
+//	if (!nr)
+//		nr = 1; /* we'll always have at least one device  */
+	return nr;
+}
+
+static unsigned
+init_output_priority_tab(void) {
+	const struct config_param *param = NULL;
+	const char *p = NULL;
+	const char *name = NULL;
+	struct rtopt_priority *pri = NULL;
+
+	unsigned cnt = audio_output_config_count();
+	if ( cnt == 0 ) {
+		return 0;
+	}
+
+	output_priority_tab = (struct rtopt_priority **)malloc(sizeof(struct rtopt_priority *) * cnt);
+	for ( unsigned i = 0; i < cnt; i++ ) {
+		output_priority_tab[i] = NULL;
+	}
+
+	unsigned idx = 0;
+	for ( unsigned i = 0; i < cnt; i++) {
+		param = config_get_next_param(CONF_AUDIO_OUTPUT, param);
+		assert(param);
+
+		name = config_get_block_string(param, AUDIO_OUTPUT_NAME, NULL);
+		if ( name != NULL ) {
+			pri = (struct rtopt_priority *)malloc(sizeof( struct rtopt_priority ));
+			pri->name = name;
+			p = config_get_block_string(param,AUDIO_OUTPUT_PRIORITY,NULL);
+			parse_priority(p, pri);
+			pri->timerslack = config_get_block_unsigned(param,
+								    AUDIO_OUTPUT_TIMERSLACK,
+								    DEFAULT_TIMERSLACK);
+			g_debug("realtime_option(init_output_priority_tab): output priority name %s policy %d  priority %d  timerslack %lu\n",
+				pri->name,pri->policy,pri->priority,pri->timerslack);
+			output_priority_tab[idx++] = pri;
+		} else {
+			g_warning("realtime_option(init_output_priority_tab): Missing \"name\" configuration\n");
+		}
+	}
+	return idx;
+}
+
+
+static int
+strtointeger(char *str, int *ival) {
+	char *endptr = NULL;
+
+	*ival = strtol(str, &endptr, 10);
+	return (*endptr == '\0') ? 0 : -1;
+}
+
+static void
+parse_priority(const char *paramstr, struct rtopt_priority *priority) {
+	char *policyname = NULL;
+	char *pstr = NULL;
+	int  priority_val;
+	int  policy_val;
+
+	priority->policy = RTOPT_DISABLE;
+	priority->priority = 0;
+
+	if ( paramstr == NULL ) {
+		return;
+	}
+	priority->policy = SCHED_OTHER;
+
+	policyname = alloca(strlen(paramstr) + 1);
+	strcpy(policyname,paramstr);
+	pstr = strchr(policyname,':');
+
+	if ( pstr != NULL ) {
+		*pstr++ = '\0';
+	}
+
+	if ( strcmp(policyname,RTOPT_SCHED_OTHER) == 0 ) {
+		return;
+	} else if ( (policy_val = get_policy(policyname)) < 0 ) {
+		g_warning("realtime_option(parse_priority): illegal policy name = '%s'   priority = '%s'\n",
+				priority->name,paramstr);
+		return;
+	}
+
+	if ( pstr == NULL ) {
+		g_warning("realtime_option(parse_priority): undefined priority  name = '%s'   priority = '%s'\n",
+				priority->name,paramstr);
+			return;
+	}
+	if ( strtointeger(pstr, &priority_val) != 0 ) {
+		g_warning("realtime_option(parse_priority): priority isn't number name = '%s'   priority = '%s'\n",priority->name,paramstr);
+			return;
+	}
+
+	if ( (priority_val < MIN_PRIORITY) ||
+			(priority_val > MAX_PRIORITY) ) {
+		g_warning("realtime_option(parse_priority): illegal priority  name = '%s'   priority = '%s'\n",priority->name,paramstr);
+		return;
+	}
+
+	priority->policy = policy_val;
+	priority->priority = priority_val;
+}
+
+
+static void
+set_parameter() {
+	const struct config_param *param = NULL;
+	struct rtopt_priority *pri = NULL;
+	const char *pstr;
+
+	init_priority_tab();
+
+	enable_rtopt = false;
+	param = config_get_next_param(CONF_RTOPT,NULL);
+	if ( param == NULL ) {
+		return;
+	}
+	enable_rtopt = true;
+
+	enable_memlock = config_get_block_bool(param,RTOPT_MEMLOCK_NAME,false);
+	stack_reserve = config_get_block_unsigned(param, RTOPT_STACKRESERVE_NAME,RTOPT_DEFAULT_STACK_RESERVE) * 1024;
+	heap_reserve  = config_get_block_unsigned(param,RTOPT_HEAPRESERVE_NAME,RTOPT_DEFAULT_HEAP_RESERVE) * 1024;
+
+	if ( enable_memlock ) {
+		g_debug("realtime_option(set_parameter): memlock enable  stack_reserve : %d   heap_reserve : %d\n",stack_reserve,heap_reserve);
+	}
+
+	for (unsigned i = 0; i < ARRAY_SIZE(priority_tab); i++ ) {
+		pri = priority_tab + i;
+		pstr = config_get_block_string(param,pri->name,NULL);
+		parse_priority(pstr, pri);
+		g_debug("realtime_option(set_parameter): %s  policy %d  priority %d\n",pri->name,pri->policy,pri->priority);
+	}
+	output_count = init_output_priority_tab();
+}
+
+static const struct rtopt_priority
+*get_priority_param(const char *key) {
+	for (unsigned i = 0; i < ARRAY_SIZE(priority_keys); i++) {
+		if ( strcmp(key,priority_keys[i]) == 0 ) {
+			return priority_tab + i;
+		}
+	}
+	return NULL;
+}
+
+static const struct rtopt_priority
+*get_output_priority_param(const char *key) {
+	for ( unsigned i = 0; i < output_count; i++ ) {
+		if ( output_priority_tab[i] == NULL ) {
+			return NULL;
+		}
+		if ( strcmp(key,output_priority_tab[i]->name) == 0 ) {
+			return output_priority_tab[i];
+		}
+	}
+	return NULL;
+}
+
+static void
+reset_limit() {
+	setUnlimited(RLIMIT_MEMLOCK,"memlock");
+	setUnlimited(RLIMIT_RTPRIO, "rtprio");
+}
+
+static int get_current_priority(struct rtopt_priority *priority) {
+	struct sched_param param;
+	int res;
+
+	res = sched_getparam(0,&param);
+	if ( res < 0 ) {
+		g_warning("realtime_option(get_current_priority): sched_getparm error errno = %s(%d)\n",strerror(errno),errno);
+		return -1;
+	}
+
+	res = sched_getscheduler(0);
+	if ( res < 0 ) {
+		g_warning("realtime_option(get_current_priority): sched_getscheduler error errno = %s(%d)\n",strerror(errno),errno);
+		return -1;
+	}
+	priority->policy = res;
+	priority->priority = param.sched_priority;
+	return 0;
+}
+
+static int change_priority(const struct rtopt_priority *priority) {
+	struct sched_param param = { .sched_priority = priority->priority };
+
+	int res = sched_setscheduler(0,priority->policy,&param);
+	if ( res < 0 ) {
+		g_warning("realtime_option(change_priority): sched_setscheduler error errno = %s(%d)\n",strerror(errno),errno);
+	}
+	g_debug("realtime_option(change_priority): name %s  policy %d   priority %d\n",
+			priority->name,priority->policy,param.sched_priority);
+	return res;
+}
+
+static void SetThreadIdlePriority(const char *name)
+{
+#ifdef SCHED_IDLE
+  struct rtopt_priority  param = {name, SCHED_IDLE,0,0l};
+  change_priority(&param);
+#endif
+
+  ioprio_set_idle();
+}
+
+static unsigned long get_output_timerslack(const char *name) {
+	const struct rtopt_priority *param = get_output_priority_param(name);
+	if ( param == NULL ) {
+	        g_debug( "realtime_option(rtopt_get_output_timerslack): name not found name = '%s'\n",name);
+   	        return DEFAULT_TIMERSLACK;
+	}
+	g_debug("realtime_option(rtopt_get_output_timerslack): name %s   policy %d  timerslack %lu\n",
+		param->name,param->policy,param->timerslack);
+	return param->timerslack;
+}
+
+//
+//
+//
+void rtopt_init() {
+	set_parameter();
+	if ( !IS_ENABLE_RTOPT ) {
+		return;
+	}
+	reset_limit();
+}
+
+
+void rtopt_memlock() {
+	void *ptr = NULL;
+
+	if ( !IS_ENABLE_RTOPT ) {
+		g_debug("realtime_option(rtopt_memlock): realtime_option disabled\n");
+		return;
+	}
+
+	if ( stack_reserve != (size_t)0 ) {
+		g_debug("realtime_option(rtopt_memlock): stack_reserve %d",stack_reserve);
+		bzero(alloca(stack_reserve), stack_reserve);
+	}
+
+	if ( heap_reserve != (size_t)0 ) {
+		g_debug("realtime_option(rtopt_memlock): heap_reserve %d",heap_reserve);
+		ptr = malloc(heap_reserve);
+		if ( ptr != NULL ) {
+			bzero(ptr, heap_reserve);
+			free(ptr);
+		} else {
+			MPD_ERROR("realtime_option(rtopt_memlock): heap allocate error reserved size = %d\n",heap_reserve);
+		}
+	}
+
+	if ( !IS_ENABLE_MEMLOCK ) {
+		g_debug("realtime_option(rtopt_memlock): memlock disabled\n");
+		return;
+	}
+
+	int stat = mlockall(MCL_CURRENT);
+	if ( stat < 0 ) {
+		MPD_ERROR("realtime_option(rtopt_memlock): mlockall error errno = %d(%s)\n",errno,strerror(errno));
+	}
+}
+
+int rtopt_change_priority(const char *name) {
+	const struct rtopt_priority *param = get_priority_param(name);
+	if ( param == NULL ) {
+		g_debug("realtime_option(rtopt_change_priority): name not found name = '%s'\n",name);
+		return -1;
+	}
+	if ( !IS_ENABLE_PRIORITY(param->policy) ) {
+		if ( strcmp(param->name,RTOPT_UPDATE_PRIORITY_NAME) == 0 ) {
+			SetThreadIdlePriority(param->name);
+			g_debug("realtime_option(rtopt_change_priority): name %s  SCHED_IDLE",param->name);
+		}
+		return 1;
+        }
+	g_debug("realtime_option(rtopt_change_priority): name %s   policy %d  priority %d\n",
+			param->name,param->policy,param->priority);
+	return rtopt_change_thread_priority(param);
+}
+
+int rtopt_change_output_priority(const char *name) {
+	const struct rtopt_priority *param = get_output_priority_param(name);
+	if ( param == NULL ) {
+		if ( strcmp(name,RTOPT_UPDATE_PRIORITY_NAME) == 0 ) {
+			SetThreadIdlePriority(name);
+	        	g_debug("realtime_option(rtopt_change_priority): name %s  SCHED_IDLE",name);
+                        return 0;
+                }
+		g_debug("realtime_option(rtopt_change_output_priority): name not found name = '%s'\n",name);
+		return -1;
+	}
+	g_debug("realtime_option(rtopt_change_output_priority): name %s   policy %d  priority %d\n",
+			param->name,param->policy,param->priority);
+	return rtopt_change_thread_priority(param);
+}
+
+int rtopt_change_thread_priority(const struct rtopt_priority *new_priority) {
+	struct rtopt_priority save;
+
+	if ( !IS_ENABLE_RTOPT ) {
+		return 1;
+	}
+	if ( !IS_ENABLE_PRIORITY(new_priority->policy) ) {
+		return 1;
+	}
+
+	if ( get_current_priority(&save) < 0 ) {
+		return 1;
+	}
+
+	if ( IS_EQUAL_PRIORITY(new_priority, &save) ) {
+		g_debug("realtime_option(rtopt_change_thread_priority): name %s not changed",new_priority->name);
+		return 1;
+	}
+
+	return change_priority(new_priority);
+}
+
+void rtopt_change_output_timerslack(const char *name) {
+  unsigned long t = get_output_timerslack(name);
+
+  SetThreadTimerSlackUS(t);
+  g_debug("output:%s  timerslack %lu", name,t);
+}
diff --git a/src/rt_opt.h b/src/rt_opt.h
new file mode 100644
index 0000000..b47307b
--- /dev/null
+++ b/src/rt_opt.h
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+//
+// mpd.conf
+//
+// realtime_option {
+//     main_priority        "POLICY:PRIORITY"
+//     io_priority          "POLICY:PRIORITY"
+//     decorder_priority    "POLICY:PRIORITY"
+//     player_priority      "POLICY:PRIORITY"
+//     update_priority      "POLICY:PRIORITY"
+//
+//     memlock              "yes" or "no"
+//     stackreserve	       "1024"
+//     heapreserve	       "10240"
+//
+//   }
+//
+//  POLICY  "OTHER" | "FIFO" | "RR" | "BATCH" | "IDLE"
+//  PRIORITY
+//            OTHER,BATCH,IDLE   0
+//            FIFO, RR           1 - 99
+//
+//   audio_output {
+//       ....
+//       ....
+//     priority              "POLICY:PRIORITY"
+//   }
+//
+
+#ifndef RT_OPT_H_
+#define RT_OPT_H_
+
+#include <sys/time.h>
+#include <sys/resource.h>
+#include <sys/mman.h>
+#include <sched.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+#ifdef ENABLE_RTOPT
+#define RTOPT_MAIN_PRIORITY_NAME	"main_priority"
+#define RTOPT_IO_PRIORITY_NAME		"io_priority"
+#define RTOPT_DECODER_PRIORITY_NAME	"decoder_priority"
+#define RTOPT_PLAYER_PRIORITY_NAME	"player_priority"
+#define RTOPT_UPDATE_PRIORITY_NAME      "update_priority"
+#define RTOPT_MEMLOCK_NAME		"memlock"
+#define RTOPT_STACKRESERVE_NAME		"stack_reserve"
+#define RTOPT_HEAPRESERVE_NAME		"heap_reserve"
+
+
+#define RTOPT_MAIL_PRIORITY    0
+#define RTOPT_DECODER_PRIORITY 1
+#define RTOPT_PLAYER_PRIORITY  2
+
+#define RTOPT_DEFAULT_STACK_RESERVE ((size_t)0)
+#define RTOPT_DEFAULT_HEAP_RESERVE  ((size_t)0)
+
+
+#define RTOPT_SCHED_OTHER  "OTHER"
+#define RTOPT_SCHED_FIFO   "FIFO"
+#define RTOPT_SCHED_RR     "RR"
+#define RTOPT_SCHED_BATCH  "BATCH"
+#define RTOPT_SCHED_IDLE   "IDLE"
+
+#define RTOPT_DISABLE (-1)
+
+struct rtopt_priority {
+	const char	*name;
+	int		policy;
+	int		priority;
+        unsigned long   timerslack;
+};
+
+static inline GQuark
+rtopt_quark(void)
+{
+	return g_quark_from_static_string("rt_opt");
+}
+
+void rtopt_init(void);
+void rtopt_memlock(void);
+unsigned long rtopt_get_output_timerslack(const char *name);
+int  rtopt_change_priority(const char *name);
+int  rtopt_change_output_priority(const char *name);
+int  rtopt_change_thread_priority(const struct rtopt_priority *new_priority);
+void rtopt_change_output_timerslack(const char *name);
+
+#endif /* ENABLE_RTOPT */
+
+#endif /* RT_OPT_H_ */
diff --git a/src/update.c b/src/update.c
index 12eec40..e70e6fe 100644
--- a/src/update.c
+++ b/src/update.c
@@ -33,6 +33,10 @@
 #include "main.h"
 #include "mpd_error.h"
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.h"
+#endif
+
 #include <glib.h>
 
 #include <assert.h>
@@ -72,6 +76,10 @@ static void * update_task(void *_path)
 	else
 		g_debug("starting");
 
+#ifdef ENABLE_RTOPT
+	rtopt_change_priority(RTOPT_UPDATE_PRIORITY_NAME);
+#endif
+
 	modified = update_walk(path, discard);
 
 	if (modified || !db_exists()) {
